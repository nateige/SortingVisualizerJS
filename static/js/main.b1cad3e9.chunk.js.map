{"version":3,"sources":["logo.svg","sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","SortingChart/sortingChartAlgorithms.js","SortingChart/SortingChart.jsx","App.js","reportWebVitals.js","index.js"],"names":["sorting_animations","getQuicksortAnimations","array","animations","right","length","console","log","runQuickSort","left","index","pivotIndex","pivotValue","push","i","tmp","quicksortPartition","swap","mainArray","firstIndex","secondIndex","getBubbleSortAnimations","size","j","runBubbleSort","getHeapSortAnimations","Math","floor","k","heapify","runHeapSort","largest","getCombSortAnimations","iteration_count","gap","decrease_factor","is_array_sorted","front","back","runCombSort","sorted","getGnomeSortAnimations","runGnomeSort","getShellSortAnimations","temp","runShellSort","NUMBER_OF_ARRAY_BARS","SortingVisualizer","props","handleClick","event","key","target","state","array1","this","resetArray","selection2","document","getElementById","value","parseInt","min","max","random","copy_array2","copy_array3","copy_array4","setState","array2","array3","array4","controls","newAnimations","animation","arrayBars","getElementsByClassName","barOneStyle","barTwoStyle","animationL","colorChange","style","setTimeout","backgroundColor","color","tempHeight","height","String","runInsertionSort","barOneSave","quickSort","selectionSort","heapSort","combSort","bubbleSort","insertionSort","gnomeSort","shellSort","array_v1","id","onClick","runSort","className","map","idx","React","Component","getQuicksortData","startTime","Date","now","getSelectionSortData","min_idx","runSelectionSort","getBubbleSortData","getInsertionSortData","getHeapSortData","getCombSortData","getGnomeSortData","getShellSortData","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","chartOptions","plugins","title","display","text","fontSize","top","legend","position","initData","labels","datasets","label","data","borderColor","fill","lineTension","radius","algo1Data","algo2Data","algo3Data","algo4Data","SortingChart","useState","chartData","setChartData","arrayACollection","arrayBCollection","arrayCCollection","arrayDCollection","arraysA","arraysB","arraysC","arraysD","randomIntFromInterval","generateRandomArrays","getSortData","algoName1","algoName2","algoName3","algoName4","algoTime1_A","algoTime1_B","algoTime1_C","algoTime1_D","algoTime2_A","algoTime2_B","algoTime2_C","algoTime2_D","algoTime3_A","algoTime3_B","algoTime3_C","algoTime3_D","algoTime4_A","algoTime4_B","algoTime4_C","algoTime4_D","Promise","resolve","reject","sortLoop","then","result","handleChange","sortSize","algoName","arrayCollection","totalTime","options","redraw","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b1cad3e9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\r\nexport var sorting_animations = [];\r\n\r\nexport function getQuicksortAnimations(array){\r\n\r\n  var animations = [];\r\n\r\n  let left = 0 ;\r\n  let right = array.length - 1 ;\r\n\r\n  console.log(\"|getQuickSortAnimations|Array|\");\r\n\r\n  array = runQuickSort(array, left, right, animations);\r\n\r\n  sorting_animations = [];\r\n\r\n  return animations ; \r\n}\r\n\r\n\r\nexport function runQuickSort(array, left, right, animations){\r\n\r\n  if(left >= right){\r\n    return;\r\n  }\r\n\r\n  let index = quicksortPartition(array, left, right, animations);\r\n\r\n  //Recursively run quicksort on smaller sections of the array until it is fully sorted\r\n  runQuickSort(array, left, index - 1, animations);\r\n\r\n  runQuickSort(array, index + 1, right, animations);\r\n\r\n  return array;\r\n\r\n}\r\n\r\nfunction quicksortPartition(array, left, right, animations){\r\n\r\n  var pivotIndex = left ;\r\n  var pivotValue = array[right] ;\r\n  animations.push([right, 1]);\r\n  sorting_animations.push([right, 1, \"Quicksort\"]);\r\n  \r\n  for(let i = left ; i < right  ; i++){\r\n\r\n    animations.push([i, 2]);\r\n    if(array[i] < pivotValue){\r\n\r\n     animations.push([i, 5]);\r\n     sorting_animations.push([i, 5, \"Quicksort\"]);\r\n     //swap(array, i, pivotIndex, animations);\r\n     let tmp = array[i];\r\n     array[i] = array[pivotIndex];\r\n     array[pivotIndex] = tmp ;\r\n   \r\n     sorting_animations.push([i, pivotIndex, 3, \"Quicksort\"]);\r\n     animations.push([i, pivotIndex, 3]);\r\n   \r\n     pivotIndex++; \r\n    }\r\n  }\r\n\r\n let tmp = array[pivotIndex];\r\n array[pivotIndex] = array[right];\r\n array[right] = tmp ;\r\n\r\n sorting_animations.push([pivotIndex, right, 3, \"Quicksort\"]);\r\n animations.push([pivotIndex, right, 3]);\r\n\r\n console.log(array);\r\n\r\n  sorting_animations.push([right, 4, \"Quicksort\"]);\r\n  animations.push([right, 4]);\r\n  return pivotIndex ;\r\n}\r\n\r\nfunction swap(mainArray, firstIndex, secondIndex, animations){\r\n\r\n  let tmp = mainArray[firstIndex];\r\n  mainArray[firstIndex] = mainArray[secondIndex];\r\n  mainArray[secondIndex] = tmp ;\r\n\r\n  animations.push([firstIndex, secondIndex, 3]);\r\n\r\n}\r\n\r\nexport function getSelectionSortAnimations(array){\r\n  var animations = [];\r\n\r\n  runSelectionSort(array, animations);\r\n\r\n  sorting_animations = [];\r\n\r\n  return animations;\r\n}\r\n\r\nfunction runSelectionSort(array, animations){\r\n\r\n  let size = array.length ;\r\n  for (let i = 0 ; i < size - 1 ; i++){\r\n\r\n    //Assign first array element as the current minimum value\r\n    let min_idx = i ;\r\n\r\n    //Color current minimum value\r\n    animations.push([min_idx, 1]);\r\n    sorting_animations.push([min_idx, 1, \"SelectionSort\"]); \r\n    for ( let j =  i + 1 ; j < size ; j++){\r\n\r\n      //Color search for new minimum\r\n      animations.push([j, 2]);\r\n      sorting_animations.push([j, 2, \"SelectionSort\"]); \r\n      //If current array element is less than the minimum value, update the minimum value\r\n      if(array[j] < array[min_idx]){\r\n        animations.push([j, 4]);\r\n        sorting_animations.push([j, 4, \"SelectionSort\"]); \r\n        min_idx = j;\r\n      }\r\n    }\r\n    //swap(array, min_idx, i, animations);\r\n    let tmp = array[min_idx];\r\n    array[min_idx] = array[i];\r\n    array[i] = tmp ;\r\n  \r\n    sorting_animations.push([min_idx, i, 3, \"SelectionSort\"]); \r\n    animations.push([min_idx, i, 3]);\r\n  \r\n\r\n  }\r\n\r\n}\r\n\r\nexport function getBubbleSortAnimations(array){\r\n  var animations = [];\r\n  \r\n  runBubbleSort(array, animations);\r\n  console.log(\"|BUBBLE SORT|\");\r\n  console.log(array);\r\n  console.log(animations);\r\n\r\n  \r\n  return animations;\r\n}\r\n\r\nfunction runBubbleSort(array, animations){\r\n\r\n  let size = array.length; \r\n  for(let i = 0 ; i < size - 1 ; i++){\r\n    for(let j = 0; j < size - i - 1; j++){\r\n      animations.push([j, 2]);\r\n      //Compare array element with element right after it and perform necessary swaps\r\n      if(array[j] > array[j + 1]){\r\n        swap(array, j, j + 1, animations);\r\n      }\r\n    }\r\n  }\r\n  console.log(\"|getBubbleSort|Array|\");\r\n}\r\n\r\nexport function getInsertionSortAnimations(array){\r\n  var animations = [];\r\n\r\n  animations = runInsertionSort(array, animations);\r\n  console.log(\"|INSERTION SORT|\");\r\n  console.log(array);\r\n  console.log(animations);\r\n  return animations;\r\n}\r\n\r\nfunction runInsertionSort(array, animations){\r\n\r\n  let key = 0 ;\r\n  let j = 0 ;\r\n  let size = array.length ;\r\n\r\n\r\n  for (let i = 1 ; i < size ; i++){\r\n\r\n    //Select the first element that has a predecessor as the key\r\n    key = array[i];\r\n\r\n    animations.push([i, 1]);\r\n \r\n\r\n    //The j index represents the predecessor to the key\r\n    j = i - 1;\r\n    animations.push([j, 2]);\r\n    \r\n    //Move all elements that are greater than the key one index ahead\r\n    while ( j >= 0 && array[j] > key){\r\n      array[j+1] = array[j];\r\n      animations.push([j+1, j, 3]);\r\n\r\n      //Decrement j to ensure that the key is inserted back in the right place\r\n      j = j - 1 ;\r\n\r\n    }\r\n   \r\n    //Insert the key back into its sorted position\r\n    array[j+1] = key ;\r\n    animations.push([j+1, 4]); \r\n\r\n  }\r\n\r\n  return animations;\r\n\r\n}\r\n\r\nexport function getHeapSortAnimations(array){\r\n  const animations = [];\r\n\r\n  runHeapSort(array, animations);\r\n  console.log(\"|HEAP SORT|\")\r\n  console.log(array);\r\n  console.log(animations);\r\n  return animations;\r\n}\r\n\r\nfunction runHeapSort(array, animations){\r\n\r\n  let size = array.length ; \r\n  let i = Math.floor(size/ 2 - 1);\r\n  let k = size - 1 ;\r\n\r\n  while  ( i >= 0){\r\n    heapify(array, size, i, animations);\r\n    animations.push([i, 4]);\r\n    i--;\r\n  }\r\n\r\n  while (k >= 0 ){\r\n    // Swap largest element with the element at the end of the unsorted array\r\n    swap(array, 0, k, animations);\r\n    heapify(array, k, 0, animations);\r\n    k--;\r\n  }\r\n\r\n}\r\n\r\n// Organizes array into a max-heap structure\r\nfunction heapify(array, size, i, animations){\r\n  let largest = i ;\r\n  let left = i * 2 + 1 ; \r\n  let right = left + 1 ; \r\n\r\n  //If the left child is larger than the root node, assign it to the root\r\n  if (left < size && array[left] > array[largest]){\r\n    //Animations here to mark the bounds of each binary-tree branch\r\n    animations.push([left, 1]);\r\n    largest = left ;\r\n  }\r\n\r\n  //If the right child is larger than the root node, assign it to the root\r\n  if(right < size && array[right] > array[largest]){\r\n    animations.push([right, 2]);\r\n    largest = right;\r\n  }\r\n\r\n  // If the largest value has changed through searching left and right nodes, swap with root\r\n  if(largest !== i){\r\n    swap(array, i, largest, animations) ;\r\n    heapify(array, size, largest, animations);\r\n  }\r\n\r\n}\r\n\r\n\r\nexport function getCombSortAnimations(array){\r\n  const animations = [];\r\n\r\n  runCombSort(array, animations);\r\n\r\n  return animations;\r\n}\r\n\r\nfunction runCombSort(array, animations){\r\n  var iteration_count = 0;\r\n  var gap = array.length - 2;\r\n  var decrease_factor = 1.25;\r\n  while (!is_array_sorted(array, animations)){\r\n\r\n    if(iteration_count > 0 ){\r\n      // Decrease gap size by 25% each pass\r\n      gap = (gap === 1) ? gap : Math.floor(gap / decrease_factor);\r\n    }\r\n    var front = 0 ;\r\n    var back = gap;\r\n    while (back <= array.length - 1){\r\n\r\n      // Compare elements at the front and back of the gap until array is sorted.\r\n      if(array[front] > array[back]){\r\n        swap(array, front, back, animations);\r\n      }\r\n\r\n      front += 1 ;\r\n      back += 1 ; \r\n\r\n    }\r\n    iteration_count += 1\r\n    \r\n  }\r\n}\r\n\r\nfunction is_array_sorted(array, animations){\r\n  var sorted = true ; \r\n  for( var i = 0; i < array.length - 1 ; i++){\r\n    if(array[i] > array[i + 1]){\r\n      sorted = false  ;\r\n      break;\r\n    }\r\n  }\r\n  return sorted;\r\n}\r\n\r\n\r\nexport function getGnomeSortAnimations(array){\r\n  const animations = [] ;\r\n\r\n  runGnomeSort(array, animations);\r\n\r\n  return animations;\r\n\r\n}\r\n\r\nfunction runGnomeSort(array, animations){\r\n\r\n  let index = 0;\r\n  let size = array.length ; \r\n\r\n  while (index < size){\r\n\r\n    //If we're at the starting position, move forward one index\r\n    if(index === 0 ){\r\n      index++ ; \r\n    }\r\n\r\n    //If the current element is larger than or equal to the previous, move forward one index\r\n    if(array[index] >= array[index - 1]){\r\n      animations.push([index, 1]);\r\n      index++;\r\n    }\r\n\r\n    //If current element is smaller than the previous, swap the two and move back one index\r\n    else{\r\n      swap(array, index, index - 1, animations);\r\n      index--;\r\n      animations.push([index, 5]); \r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport function getShellSortAnimations(array){\r\n  const animations = [] ;\r\n\r\n  runShellSort(array, animations);\r\n\r\n  return animations;\r\n\r\n}\r\n\r\nfunction runShellSort(array, animations){\r\n\r\n  //Shell sort is a variation of insertion sort\r\n  let size = array.length;\r\n\r\n  //Gap is used as an interval to find elements that are far apart from each other.\r\n  //As time goes on, the interval will grow smaller and we compare closer elements.\r\n\r\n  for (let gap = Math.floor(size/2) ; gap > 0 ; gap = Math.floor(gap/2)){\r\n    for (let i = gap; i < size; i += 1){\r\n      let temp = array[i];\r\n      let j ;\r\n      animations.push([i, 2]);\r\n\r\n      // Compare and swap elements that are gap-distance apart\r\n      for(j = i ; j >= gap && (array[j-gap] > temp) ; j-=gap){\r\n        array[j] = array[j - gap] ;\r\n        animations.push([j, j-gap, 3]); \r\n      }\r\n\r\n      // Put the original array[i] element in its correct location\r\n      array[j] = temp ; \r\n      animations.push([j, i, 4]); \r\n    }\r\n  }\r\n}\r\n","import React from 'react';\r\nimport  * as controls from '../sortingAlgorithms/sortingAlgorithms.js'\r\nimport './SortingVisualizer.css';\r\n\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nlet NUMBER_OF_ARRAY_BARS = 25\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // array1: Holds the values of array elements that are rendered on the page\r\n    this.state = {\r\n      array1: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  // Renders a new random array on the page\r\n  resetArray() {\r\n\r\n    // Grab selected value to determine size of random array\r\n    let selection2 = document.getElementById('select2').value ;\r\n    \r\n    if(selection2 != \"\"){\r\n      NUMBER_OF_ARRAY_BARS = parseInt(selection2);\r\n    }\r\n\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, 300));\r\n    }\r\n    const copy_array2 = array;\r\n    const copy_array3 = array;\r\n    const copy_array4 = array; \r\n    this.setState({array1: [], array2: [], array3: [], array4: []});\r\n    this.setState({array1: array, array2: copy_array2, array3: copy_array3, array4: copy_array4});\r\n  }\r\n\r\n  // Animation Codes:\r\n  // 1 - Color Pivot\r\n  // 2 - Color Search Index\r\n  // 3 - Swap Values\r\n  // 4 - Restore Pivot to Original Color\r\n  // 5 - Found value less than pivot\r\n  async quickSort() {\r\n\r\n    let animations = [];\r\n    animations = controls.getQuicksortAnimations(this.state.array1);\r\n\r\n    let newAnimations = [];\r\n\r\n    for( let animation of animations){\r\n      newAnimations.push(animation);\r\n      newAnimations.push(animation);\r\n      newAnimations.push(animation);\r\n\r\n    }\r\n    animations = null;\r\n\r\n    for (let i =  0; i < newAnimations.length ; i++){\r\n      let arrayBars = document.getElementsByClassName('array-bar1');\r\n      let barOneStyle;\r\n      let barTwoStyle;\r\n      let animationL = newAnimations[i] ; \r\n      let animationCode = animationL[animationL.length - 1 ];\r\n      let colorChange = false; \r\n\r\n      switch(animationCode){\r\n        case 1:\r\n          colorChange = (i % 3 !== 2) ; \r\n\r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n\r\n          if(colorChange){\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'red' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n\r\n        else{\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'purple' ;\r\n  \r\n          }, i * 20); \r\n\r\n        }\r\n\r\n          break;\r\n        case 2:\r\n          colorChange = (i % 3 !== 2) ; \r\n\r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n\r\n          if(colorChange){\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'orange' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        else{\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'turquoise' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        break;\r\n        case 3:\r\n          colorChange = (i % 3 !== 2) ; \r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n          barTwoStyle = arrayBars[animationL[1]].style;\r\n          if (colorChange){\r\n            const color = i % 3 === 0 ? 'blue' : 'turquoise' ;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color ;\r\n              barTwoStyle.backgroundColor = color ;  \r\n    \r\n            }, i * 20); \r\n          }\r\n          else{\r\n            setTimeout(() => {\r\n              const tempHeight = barOneStyle.height ;\r\n              barOneStyle.height = barTwoStyle.height ;\r\n              barTwoStyle.height = tempHeight ;  \r\n    \r\n            }, i * 20)\r\n          }\r\n          break;\r\n        case 4:\r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'turquoise' ;\r\n  \r\n          }, i * 20); \r\n          break;\r\n          \r\n        default:\r\n\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  //Animation Codes:\r\n  // 1 - Color Minimum\r\n  // 2 - Search Index for new minimum\r\n  // 3 - Swap values\r\n  // 4 - Update minimum value\r\n  async selectionSort() {\r\n\r\n    let animations = [];\r\n    animations = controls.getQuicksortAnimations(this.state.array1);\r\n\r\n    let newAnimations = [];\r\n\r\n    for( let animation of animations){\r\n      newAnimations.push(animation);\r\n      newAnimations.push(animation);\r\n      newAnimations.push(animation);\r\n\r\n    }\r\n\r\n    animations = null;\r\n\r\n    for (let i =  0; i < newAnimations.length ; i++){\r\n      let arrayBars = document.getElementsByClassName('array-bar1');\r\n      console.log(\"|ARRAY BARS SELSORT|\" + String(arrayBars));\r\n      let barOneStyle;\r\n      let barTwoStyle;\r\n      let animationL = newAnimations[i] ; \r\n      let animationCode = animationL[animationL.length - 1 ];\r\n      let colorChange = false; \r\n\r\n      switch(animationCode){\r\n        case 1:\r\n          colorChange = (i % 3 !== 2) ; \r\n\r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n\r\n          if(colorChange){\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'red' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n\r\n          break;\r\n        case 2:\r\n          colorChange = (i % 3 !== 2) ; \r\n\r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n\r\n          if(colorChange){\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'orange' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        else{\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'turquoise' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        break;\r\n        case 3:\r\n          colorChange = (i % 3 !== 2) ; \r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n          barTwoStyle = arrayBars[animationL[1]].style;\r\n          if (colorChange){\r\n            const color = i % 3 === 0 ? 'blue' : 'turquoise' ;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color ;\r\n              barTwoStyle.backgroundColor = color ;  \r\n    \r\n            }, i * 20); \r\n          }\r\n          else{\r\n            setTimeout(() => {\r\n              const tempHeight = barOneStyle.height ;\r\n              barOneStyle.height = barTwoStyle.height ;\r\n              barTwoStyle.height = tempHeight ;  \r\n    \r\n            }, i * 20)\r\n          }\r\n          break;\r\n        case 4:\r\n          colorChange = (i % 3 !== 2) ; \r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n\r\n          if (colorChange){\r\n            const color = i % 3 === 0 ? 'purple' : 'turquoise' ;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color ;\r\n              barTwoStyle.backgroundColor = color ;  \r\n    \r\n            }, i * 20); \r\n          }\r\n\r\n          break;\r\n          \r\n        default:\r\n\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  // Animation Codes\r\n  // 1 - Mark the max node on this branch (if left child)\r\n  // 2 - Mark the max node on this branch (if right child)\r\n  // 3 - Swap values\r\n\r\n  heapSort() {\r\n    let animations = [];\r\n    animations = controls.getHeapSortAnimations(this.state.array1);\r\n\r\n    let newAnimations = [];\r\n\r\n    for( let animation of animations){\r\n      newAnimations.push(animation);\r\n      newAnimations.push(animation);\r\n      newAnimations.push(animation);\r\n\r\n    }\r\n\r\n    animations = null;\r\n\r\n    for (let i =  0; i < newAnimations.length ; i++){\r\n      let arrayBars = document.getElementsByClassName('array-bar1');\r\n      let barOneStyle;\r\n      let barTwoStyle;\r\n      let animationL = newAnimations[i] ; \r\n      let animationCode = animationL[animationL.length - 1 ];\r\n      let colorChange = false; \r\n\r\n      switch(animationCode){\r\n        case 1:\r\n          colorChange = (i % 3 !== 2) ; \r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n\r\n          if(colorChange){\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'deeppink' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        else{\r\n          setTimeout(() => {\r\n  \r\n          }, i * 20); \r\n        }\r\n        break;\r\n        case 2:\r\n          colorChange = (i % 3 !== 2) ; \r\n\r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n\r\n          if(colorChange){\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'darkblue' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        else{\r\n          setTimeout(() => {\r\n  \r\n          }, i * 20); \r\n        }\r\n        break;\r\n        case 3:\r\n          colorChange = (i % 3 !== 2) ; \r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n          barTwoStyle = arrayBars[animationL[1]].style;\r\n          if (colorChange){\r\n            const color = i % 3 === 0 ? 'blue' : 'turquoise' ;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color ;\r\n              barTwoStyle.backgroundColor = color ;  \r\n    \r\n            }, i * 20); \r\n          } \r\n          else{\r\n            setTimeout(() => {\r\n              const tempHeight = barOneStyle.height ;\r\n              barOneStyle.height = barTwoStyle.height ;\r\n              barTwoStyle.height = tempHeight ;  \r\n    \r\n            }, i * 20)\r\n          }\r\n          break;\r\n          \r\n        default:\r\n\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  // Animation Codes\r\n  // 3 - Swap values\r\n  combSort() {\r\n    let animations = [];\r\n    animations = controls.getCombSortAnimations(this.state.array1);\r\n\r\n    let newAnimations = [];\r\n\r\n    for( let animation of animations){\r\n      newAnimations.push(animation);\r\n      newAnimations.push(animation);\r\n      newAnimations.push(animation);\r\n\r\n    }\r\n\r\n    animations = null;\r\n\r\n    for (let i =  0; i < newAnimations.length ; i++){\r\n      let arrayBars = document.getElementsByClassName('array-bar1');\r\n      let barOneStyle;\r\n      let barTwoStyle;\r\n      let animationL = newAnimations[i] ; \r\n      let animationCode = animationL[animationL.length - 1 ];\r\n      let colorChange = false; \r\n\r\n      switch(animationCode){\r\n        case 3:\r\n          colorChange = (i % 3 !== 2) ; \r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n          barTwoStyle = arrayBars[animationL[1]].style;\r\n          if (colorChange){\r\n            const color = i % 3 === 0 ? 'blue' : 'turquoise' ;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color ;\r\n              barTwoStyle.backgroundColor = color ;  \r\n    \r\n            }, i * 20); \r\n          } \r\n          else{\r\n            setTimeout(() => {\r\n              const tempHeight = barOneStyle.height ;\r\n              barOneStyle.height = barTwoStyle.height ;\r\n              barTwoStyle.height = tempHeight ;  \r\n    \r\n            }, i * 20)\r\n          }\r\n          break;\r\n          \r\n        default:\r\n\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  //Animation Codes:\r\n  // 2 - Search Index for new minimum\r\n  // 3 - Swap values\r\n  bubbleSort() {\r\n    let animations = [];\r\n    animations = controls.getBubbleSortAnimations(this.state.array1);\r\n\r\n    let newAnimations = [];\r\n\r\n    for( let animation of animations){\r\n      newAnimations.push(animation);\r\n      newAnimations.push(animation);\r\n      newAnimations.push(animation);\r\n\r\n    }\r\n\r\n    animations = null;\r\n\r\n    for (let i =  0; i < newAnimations.length ; i++){\r\n      let arrayBars = document.getElementsByClassName('array-bar1');\r\n      console.log(\"|ARRAY BARS SELSORT|\" + String(arrayBars));\r\n      let barOneStyle;\r\n      let barTwoStyle;\r\n      let animationL = newAnimations[i] ; \r\n      let animationCode = animationL[animationL.length - 1 ];\r\n      let colorChange = false; \r\n\r\n      switch(animationCode){\r\n        case 2:\r\n          colorChange = (i % 3 !== 2) ; \r\n\r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n\r\n          if(colorChange){\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'orange' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        else{\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'turquoise' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        break;\r\n        case 3:\r\n          colorChange = (i % 3 !== 2) ; \r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n          barTwoStyle = arrayBars[animationL[1]].style;\r\n          if (colorChange){\r\n            const color = i % 3 === 0 ? 'blue' : 'turquoise' ;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color ;\r\n              barTwoStyle.backgroundColor = color ;  \r\n    \r\n            }, i * 20); \r\n          }\r\n          else{\r\n            setTimeout(() => {\r\n              const tempHeight = barOneStyle.height ;\r\n              barOneStyle.height = barTwoStyle.height ;\r\n              barTwoStyle.height = tempHeight ;  \r\n    \r\n            }, i * 20)\r\n          }\r\n          break;\r\n          \r\n        default:\r\n\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  //Animation Codes:\r\n  // 1 - First element that has a predecessor (key)\r\n  // 2 - Predecessor to the key\r\n  // 3 - Swap values\r\n  // 4 - Insert key back to its sorted position\r\n  insertionSort(){\r\n    let animations = [];\r\n    animations = controls.getInsertionSortAnimations(this.state.array1);\r\n\r\n    let newAnimations = [];\r\n\r\n    for( let animation of animations){\r\n      newAnimations.push(animation);\r\n      newAnimations.push(animation);\r\n      newAnimations.push(animation);\r\n\r\n    }\r\n    animations = null;\r\n\r\n    let barOneSave; \r\n    for (let i =  0; i < newAnimations.length ; i++){\r\n      let arrayBars = document.getElementsByClassName('array-bar1');\r\n      let barOneStyle;\r\n      let barTwoStyle;\r\n      let animationL = newAnimations[i] ; \r\n      let animationCode = animationL[animationL.length - 1 ];\r\n      let colorChange = false;\r\n\r\n      switch(animationCode){\r\n        case 1:\r\n          colorChange = (i % 3 !== 2) ; \r\n\r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n          barOneSave = barOneStyle ; \r\n\r\n          if(colorChange){\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'red' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n\r\n          break;\r\n        case 2:\r\n          colorChange = (i % 3 !== 2) ; \r\n\r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n\r\n          if(colorChange){\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'orange' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        else{\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'turquoise' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        break;\r\n        case 3:\r\n          colorChange = (i % 3 !== 2) ; \r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n          barTwoStyle = arrayBars[animationL[1]].style;\r\n          if (colorChange){\r\n            const color = i % 3 === 0 ? 'blue' : 'turquoise' ;\r\n            setTimeout(() => {\r\n              barTwoStyle.backgroundColor = color ;  \r\n    \r\n            }, i * 20); \r\n          }\r\n          else{\r\n            setTimeout(() => {\r\n              const tempHeight = barOneStyle.height ;\r\n              barOneStyle.height = barTwoStyle.height ;\r\n              barTwoStyle.height = tempHeight ;  \r\n    \r\n            }, i * 20)\r\n          }\r\n          break;\r\n          case 4:\r\n            colorChange = (i % 3 !== 2) ; \r\n  \r\n            barOneStyle = arrayBars[animationL[0]].style;\r\n  \r\n            if(colorChange){\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = 'black' ;\r\n              barOneSave.backgroundColor = 'turquoise';\r\n    \r\n            }, i * 20); \r\n          }\r\n          else{\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = 'turquoise' ;\r\n    \r\n            }, i * 20); \r\n          }\r\n          break;\r\n          \r\n        default:\r\n\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  //Animation Codes:\r\n  // 1 - Search Index\r\n  // 3 - Swap values\r\n  // 5 - Move back one index\r\n  gnomeSort(){\r\n    let animations = [];\r\n    animations = controls.getGnomeSortAnimations(this.state.array1);\r\n\r\n    let newAnimations = [];\r\n\r\n    for( let animation of animations){\r\n      newAnimations.push(animation);\r\n      newAnimations.push(animation);\r\n      newAnimations.push(animation);\r\n\r\n    }\r\n\r\n    animations = null;\r\n\r\n    for (let i =  0; i < newAnimations.length ; i++){\r\n      let arrayBars = document.getElementsByClassName('array-bar1');\r\n      let barOneStyle;\r\n      let barTwoStyle;\r\n      let animationL = newAnimations[i] ; \r\n      let animationCode = animationL[animationL.length - 1 ];\r\n      let colorChange = false; \r\n\r\n      switch(animationCode){\r\n        case 1:\r\n          colorChange = (i % 3 !== 2) ; \r\n\r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n\r\n          if(colorChange){\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'red' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        else{\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'turquoise' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        break;\r\n        case 2:\r\n          colorChange = (i % 3 !== 2) ; \r\n\r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n\r\n          if(colorChange){\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'orange' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        else{\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'turquoise' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        break;\r\n        case 3:\r\n          colorChange = (i % 3 !== 2) ; \r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n          barTwoStyle = arrayBars[animationL[1]].style;\r\n          if (colorChange){\r\n            const color = i % 3 === 0 ? 'blue' : 'turquoise' ;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color ;\r\n              barTwoStyle.backgroundColor = color ;  \r\n    \r\n            }, i * 20); \r\n          }\r\n          else{\r\n            setTimeout(() => {\r\n              const tempHeight = barOneStyle.height ;\r\n              barOneStyle.height = barTwoStyle.height ;\r\n              barTwoStyle.height = tempHeight ;  \r\n    \r\n            }, i * 20)\r\n          }\r\n          break;\r\n          case 4:\r\n            colorChange = (i % 3 !== 2) ; \r\n  \r\n            barOneStyle = arrayBars[animationL[0]].style;\r\n  \r\n            if(colorChange){\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = 'purple' ;\r\n    \r\n            }, i * 20); \r\n          }\r\n          else{\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = 'turquoise' ;\r\n    \r\n            }, i * 20); \r\n          }\r\n          break;\r\n          case 5:\r\n            colorChange = (i % 3 !== 2) ; \r\n  \r\n            barOneStyle = arrayBars[animationL[0]].style;\r\n  \r\n            if(colorChange){\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = 'black' ;\r\n    \r\n            }, i * 20); \r\n          }\r\n          else{\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = 'turquoise' ;\r\n    \r\n            }, i * 20); \r\n          }\r\n          break;\r\n          \r\n        default:\r\n\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  //Animation Codes:\r\n  // 2 - Search Index within gap\r\n  // 3 - Swap values\r\n  shellSort(){\r\n    let animations = [];\r\n    animations = controls.getShellSortAnimations(this.state.array1);\r\n\r\n    let newAnimations = [];\r\n\r\n    for( let animation of animations){\r\n      newAnimations.push(animation);\r\n      newAnimations.push(animation);\r\n      newAnimations.push(animation);\r\n\r\n    }\r\n\r\n    animations = null;\r\n\r\n    for (let i =  0; i < newAnimations.length ; i++){\r\n      let arrayBars = document.getElementsByClassName('array-bar1');\r\n      let barOneStyle;\r\n      let barTwoStyle;\r\n      let animationL = newAnimations[i] ; \r\n      let animationCode = animationL[animationL.length - 1 ];\r\n      let colorChange = false; \r\n\r\n      switch(animationCode){\r\n        case 1:\r\n          colorChange = (i % 3 !== 2) ; \r\n\r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n\r\n          if(colorChange){\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'red' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        else{\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'turquoise' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        break;\r\n        case 2:\r\n          colorChange = (i % 3 !== 2) ; \r\n\r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n\r\n          if(colorChange){\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'orange' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        else{\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = 'turquoise' ;\r\n  \r\n          }, i * 20); \r\n        }\r\n        break;\r\n        case 3:\r\n          colorChange = (i % 3 !== 2) ; \r\n          barOneStyle = arrayBars[animationL[0]].style;\r\n          barTwoStyle = arrayBars[animationL[1]].style;\r\n          if (colorChange){\r\n            const color = i % 3 === 0 ? 'blue' : 'turquoise' ;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color ;\r\n              barTwoStyle.backgroundColor = color ;  \r\n    \r\n            }, i * 20); \r\n          }\r\n          else{\r\n            setTimeout(() => {\r\n              const tempHeight = barOneStyle.height ;\r\n              barOneStyle.height = barTwoStyle.height ;\r\n              barTwoStyle.height = tempHeight ;  \r\n    \r\n            }, i * 20)\r\n          }\r\n          break;\r\n          case 4:\r\n            colorChange = (i % 3 !== 2) ; \r\n  \r\n            barOneStyle = arrayBars[animationL[0]].style;\r\n  \r\n            if(colorChange){\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = 'purple' ;\r\n    \r\n            }, i * 20); \r\n          }\r\n          else{\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = 'turquoise' ;\r\n    \r\n            }, i * 20); \r\n          }\r\n          break;\r\n          \r\n        default:\r\n\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  // Triggers sort animation on the web page\r\n  runSort(){\r\n  \r\n    let selection = document.getElementById('select1').value ; \r\n    \r\n    switch(selection){\r\n      case \"Quick Sort\":\r\n        this.quickSort();\r\n        break;\r\n      case \"Selection Sort\":\r\n        this.selectionSort();\r\n        break;\r\n      case \"Heap Sort\":\r\n        this.heapSort();\r\n        break;\r\n      case \"Comb Sort\":\r\n        this.combSort();\r\n        break;\r\n      case \"Bubble Sort\":\r\n        this.bubbleSort();\r\n        break;\r\n      case \"Insertion Sort\":\r\n        this.insertionSort();\r\n        break;\r\n      case \"Gnome Sort\":\r\n        this.gnomeSort();\r\n        break;\r\n      case \"Shell Sort\":\r\n        this.shellSort();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n\r\n}\r\n\r\n  handleClick = (event, key) => {\r\n    console.log(event.target);\r\n    console.log('key index: ', key);\r\n  };\r\n\r\n  render() {\r\n    let array_v1 = this.state.array1;\r\n\r\n    return (\r\n      <div>\r\n      <div>\r\n      <div id=\"heading\">Exploring the Speed of Sorting Algorithms</div>\r\n      <div id=\"label_bar\">\r\n        <label id=\"b1\"> Select Algorithm </label>\r\n        <select id=\"select1\">\r\n          <option></option>\r\n          <option>Quick Sort</option>\r\n          <option>Selection Sort</option>\r\n          <option>Heap Sort</option>\r\n          <option>Comb Sort</option>\r\n          <option>Bubble Sort</option>\r\n          <option>Insertion Sort</option>\r\n          <option>Gnome Sort</option>\r\n          <option>Shell Sort</option>\r\n        </select>\r\n        <label id=\"b1\"> Sorting Size </label>\r\n        <select id=\"select2\">\r\n          <option></option>\r\n          <option>25</option>\r\n          <option>50</option>\r\n          <option>100</option>\r\n        </select>\r\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n        <button onClick={() => this.runSort()}>Run Animation</button>\r\n\r\n      </div>\r\n\r\n      <div id=\"graph1\"></div>\r\n      <div id=\"net1\" className=\"boxStats\">\r\n        <p><span id=\"sort1\">Algorithm:</span></p>\r\n         <div className=\"array-container\">\r\n         {array_v1.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar1\"\r\n            key={String(idx) + \" \" + String(\"array-bar1\")}\r\n            onClick={event => this.handleClick(event,idx)}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}></div>\r\n        ))}\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n    </div>\r\n    </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\n// Generate a random number from the min-max range\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","\r\nexport function getQuicksortData(array){\r\n\r\n  var Data = [];\r\n  var startTime = Date.now();\r\n\r\n  let left = 0 ;\r\n  let right = array.length - 1 ;\r\n\r\n  Data = runQuickSort(array, left, right);\r\n\r\n  var endTime = Date.now() ; \r\n  var completeTime = endTime - startTime ; \r\n\r\n//  console.log(\"Quicksort Time|\" + completeTime);\r\n  \r\n  return completeTime ; \r\n}\r\n\r\n\r\nfunction runQuickSort(array, left, right){\r\n\r\n  if(left >= right){\r\n    return;\r\n  }\r\n\r\n  let index = quicksortPartition(array, left, right);\r\n\r\n  //Recursively run quicksort on smaller sections of the array until it is fully sorted\r\n  runQuickSort(array, left, index - 1);\r\n\r\n  runQuickSort(array, index + 1, right);\r\n\r\n  return array;\r\n\r\n}\r\n\r\nfunction quicksortPartition(array, left, right){\r\n\r\n  //NOTE: QUICKSORT will likely need different array logic than others for animating swaps\r\n\r\n  var pivotIndex = left ;\r\n  var pivotValue = array[right] ;\r\n  \r\n  for(let i = left ; i < right  ; i++){\r\n\r\n    if(array[i] < pivotValue){\r\n\r\n     //swap(array, i, pivotIndex, Data);\r\n     let tmp = array[i];\r\n     array[i] = array[pivotIndex];\r\n     array[pivotIndex] = tmp ;\r\n   \r\n     pivotIndex++; \r\n    }\r\n  }\r\n\r\n //swap(array, pivotIndex, right, Data);\r\n let tmp = array[pivotIndex];\r\n array[pivotIndex] = array[right];\r\n array[right] = tmp ;\r\n\r\n  return pivotIndex ;\r\n}\r\n\r\nfunction swap(mainArray, firstIndex, secondIndex){\r\n\r\n  let tmp = mainArray[firstIndex];\r\n  mainArray[firstIndex] = mainArray[secondIndex];\r\n  mainArray[secondIndex] = tmp ;\r\n\r\n}\r\n\r\nexport function getSelectionSortData(array){\r\n  var Data = [];\r\n\r\n  var startTime = Date.now();\r\n\r\n  Data = runSelectionSort(array);\r\n\r\n  var endTime = Date.now();\r\n\r\n  var completeTime = endTime - startTime ; \r\n\r\n  return completeTime;\r\n}\r\n\r\nfunction runSelectionSort(array){\r\n\r\n  let size = array.length ;\r\n  for (let i = 0 ; i < size - 1 ; i++){\r\n\r\n    //Assign first array element as the current minimum value\r\n    let min_idx = i ;\r\n\r\n    for ( let j =  i + 1 ; j < size ; j++){\r\n\r\n      //If current array element is less than the minimum value, update the minimum value\r\n      if(array[j] < array[min_idx]){\r\n        min_idx = j;\r\n      }\r\n    }\r\n    //swap(array, min_idx, i, Data);\r\n    let tmp = array[min_idx];\r\n    array[min_idx] = array[i];\r\n    array[i] = tmp ;\r\n\r\n  }\r\n\r\n  return array; \r\n\r\n}\r\n\r\nexport function getBubbleSortData(array){\r\n  var Data = [];\r\n\r\n  var startTime = Date.now();\r\n  \r\n  Data = runBubbleSort(array);\r\n\r\n  var endTime = Date.now();\r\n\r\n  var completeTime = endTime - startTime ;\r\n  \r\n  //console.log(\"|Bubble Time|\" + completeTime);\r\n\r\n  return completeTime;\r\n}\r\n\r\nfunction runBubbleSort(array){\r\n\r\n  let size = array.length; \r\n  for(let i = 0 ; i < size - 1 ; i++){\r\n    for(let j = 0; j < size - i - 1; j++){\r\n      //Compare array element with element right after it and perform necessary swaps\r\n      if(array[j] > array[j + 1]){\r\n        swap(array, j, j + 1);\r\n      }\r\n    }\r\n  }\r\n return array; \r\n}\r\n\r\nexport function getInsertionSortData(array){\r\n  var Data = [];\r\n\r\n  var startTime = Date.now();\r\n  Data = runInsertionSort(array);\r\n  var endTime = Date.now();\r\n\r\n  var completeTime = endTime - startTime ;\r\n  \r\n // console.log(\"|Insertion Time|\" + completeTime);\r\n\r\n  return completeTime;\r\n}\r\n\r\nfunction runInsertionSort(array){\r\n\r\n  let key = 0 ;\r\n  let j = 0 ;\r\n  let size = array.length ;\r\n\r\n\r\n  for (let i = 1 ; i < size ; i++){\r\n\r\n    //Select the first element that has a predecessor as the key\r\n    key = array[i];\r\n \r\n\r\n    //The j index represents the predecessor to the key\r\n    j = i - 1;\r\n    \r\n    //Move all elements that are greater than the key one index ahead\r\n    while ( j >= 0 && array[j] > key){\r\n      array[j+1] = array[j];\r\n\r\n      //Decrement j to ensure that the key is inserted back in the right place\r\n      j = j - 1 ;\r\n\r\n    }\r\n   \r\n    //Insert the key back into its sorted position\r\n    array[j+1] = key ;\r\n\r\n  }\r\n\r\n  return array ;\r\n\r\n}\r\n\r\nexport function getHeapSortData(array){\r\n  var Data = [];\r\n\r\n  var startTime = Date.now();\r\n  Data =  runHeapSort(array);\r\n  var endTime = Date.now();\r\n\r\n  var completeTime = endTime - startTime ;\r\n\r\n  return completeTime;\r\n}\r\n\r\nfunction runHeapSort(array){\r\n\r\n  let size = array.length ; \r\n  let i = Math.floor(size/ 2 - 1);\r\n  let k = size - 1 ;\r\n\r\n  while  ( i >= 0){\r\n    heapify(array, size, i);\r\n    i--;\r\n  }\r\n\r\n  while (k >= 0 ){\r\n    swap(array, 0, k);\r\n    heapify(array, k, 0);\r\n    k--;\r\n  }\r\n\r\n  return array ;\r\n}\r\n\r\n// Organizes array into a max-heap structure\r\nfunction heapify(array, size, i){\r\n  let largest = i ;\r\n  let left = i * 2 + 1 ; \r\n  let right = left + 1 ; \r\n\r\n  //If the left child is larger than the root node, assign it to the root\r\n  if (left < size && array[left] > array[largest]){\r\n    //Data here to mark the bounds of each binary-tree branch\r\n    largest = left ;\r\n  }\r\n\r\n  //If the right child is larger than the root node, assign it to the root\r\n  if(right < size && array[right] > array[largest]){\r\n    largest = right;\r\n  }\r\n\r\n  // If the largest value has changed through searching left and right nodes, swap with root\r\n  if(largest !== i){\r\n    swap(array, i, largest) ;\r\n    heapify(array, size, largest);\r\n  }\r\n\r\n}\r\n\r\n\r\nexport function getCombSortData(array){\r\n  var Data = [];\r\n\r\n  var startTime = Date.now();\r\n\r\n  Data = runCombSort(array);\r\n\r\n  var endTime = Date.now();\r\n\r\n  var completeTime = endTime - startTime;\r\n\r\n  return completeTime;\r\n}\r\n\r\nfunction runCombSort(array){\r\n  var iteration_count = 0;\r\n  var gap = array.length - 2;\r\n  var decrease_factor = 1.25;\r\n  while (!is_array_sorted(array)){\r\n    if(iteration_count > 0 ){\r\n      gap = (gap === 1) ? gap : Math.floor(gap / decrease_factor);\r\n    }\r\n    var front = 0 ;\r\n    var back = gap;\r\n    while (back <= array.length - 1){\r\n\r\n      if(array[front] > array[back]){\r\n        swap(array, front, back);\r\n      }\r\n\r\n      front += 1 ;\r\n      back += 1 ; \r\n\r\n    }\r\n    iteration_count += 1\r\n    \r\n  }\r\n  return array;\r\n}\r\n\r\nfunction is_array_sorted(array){\r\n  var sorted = true ; \r\n  for( var i = 0; i < array.length - 1 ; i++){\r\n    if(array[i] > array[i + 1]){\r\n      sorted = false  ;\r\n      break;\r\n    }\r\n  }\r\n  return sorted;\r\n}\r\n\r\n\r\nexport function getGnomeSortData(array){\r\n  var Data = [] ;\r\n\r\n  var startTime = Date.now();\r\n\r\n  Data = runGnomeSort(array, Data);\r\n\r\n  var endTime = Date.now();\r\n\r\n  var completeTime = endTime - startTime ; \r\n\r\n  return completeTime;\r\n\r\n}\r\n\r\nfunction runGnomeSort(array){\r\n\r\n  let index = 0;\r\n  let size = array.length ; \r\n\r\n  while (index < size){\r\n\r\n    //If we're at the starting position, move forward one index\r\n    if(index === 0 ){\r\n      index++ ; \r\n    }\r\n\r\n    //If the current element is larger than or equal to the previous, move forward one index\r\n    if(array[index] >= array[index - 1]){\r\n      index++;\r\n    }\r\n\r\n    //If current element is smaller than the previous, swap the two and move back one index\r\n    else{\r\n      swap(array, index, index - 1);\r\n      index--;\r\n    }\r\n  }\r\n\r\n  return array ; \r\n}\r\n\r\nexport function getShellSortData(array){\r\n  var Data = [] ;\r\n\r\n  var startTime = Date.now();\r\n\r\n  Data = runShellSort(array);\r\n\r\n  var endTime = Date.now();\r\n  var completeTime = endTime - startTime ; \r\n\r\n  return completeTime;\r\n\r\n}\r\n\r\nfunction runShellSort(array){\r\n\r\n  //Shell sort is a variation of insertion sort\r\n  let size = array.length;\r\n\r\n  //Gap is used as an interval to find elements that are far apart from each other.\r\n  //As time goes on, the interval will grow smaller and we compare closer elements.\r\n\r\n  for (let gap = Math.floor(size/2) ; gap > 0 ; gap = Math.floor(gap/2)){\r\n    for (let i = gap; i < size; i += 1){\r\n      let temp = array[i];\r\n      let j ;\r\n\r\n      for(j = i ; j >= gap && (array[j-gap] > temp) ; j-=gap){\r\n        array[j] = array[j - gap] ;\r\n      }\r\n\r\n      array[j] = temp ; \r\n    }\r\n  }\r\n  return array;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport * as controls from './sortingChartAlgorithms';\r\nimport '../SortingVisualizer/SortingVisualizer.css';\r\nimport { Line, Chart } from 'react-chartjs-2';\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js'\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n)\r\n\r\n\r\nconst chartOptions = {\r\n  plugins: {\r\n  title: {\r\n      display: true,\r\n      text: 'Completion time of Sorting Algorithms (ms)',\r\n      fontSize: 50,\r\n      top: 10\r\n  },\r\n  legend: {\r\n      display: true,\r\n      position: 'left',\r\n  }\r\n}\r\n};\r\n\r\n// Initial data rendered in the line chart\r\nvar initData = {\r\n  labels: ['100x100', '500x500', '1000x1000', '2000x2000'],\r\n  datasets: [\r\n    {\r\n      label: 'Algo1',\r\n      data: [10, 50, 25, 70],\r\n      backgroundColor: 'blue',\r\n      borderColor: 'lightblue',\r\n      fill: false,\r\n      lineTension: 0,\r\n      radius: 5,\r\n    },\r\n    {\r\n      label: 'Algo2',\r\n      data: [20, 35, 40, 60],\r\n      backgroundColor: 'green',\r\n      borderColor: 'lightgreen',\r\n      fill: false,\r\n      lineTension: 0,\r\n      radius: 5,\r\n    },\r\n    {\r\n      label: 'Algo3',\r\n      data: [22, 32, 42, 62],\r\n      backgroundColor: 'red',\r\n      borderColor: 'pink',\r\n      fill: false,\r\n      lineTension: 0,\r\n      radius: 5,\r\n    },\r\n    {\r\n      label: 'Algo4',\r\n      data: [29, 39, 49, 69],\r\n      backgroundColor: 'orange',\r\n      borderColor: 'yellow',\r\n      fill: false,\r\n      lineTension: 0,\r\n      radius: 5,\r\n    },\r\n  ],\r\n};\r\n\r\n// Arrays of the completion times for each selected algorithm\r\nvar algo1Data = [];\r\nvar algo2Data = [];\r\nvar algo3Data = [];\r\nvar algo4Data = [];\r\n\r\n// Updated data object for the chart\r\nlet midData = {\r\n  labels: ['100x100', '500x500', '1000x1000', '2000x2000'],\r\n  datasets: [\r\n    {\r\n      label: 'Algo1',\r\n      data: [1, 2, 3, 4],\r\n      backgroundColor: 'blue',\r\n      borderColor: 'lightblue',\r\n      fill: false,\r\n      lineTension: 0,\r\n      radius: 5,\r\n    },\r\n    {\r\n      label: 'Algo2',\r\n      data: [20, 35, 40, 60],\r\n      backgroundColor: 'green',\r\n      borderColor: 'lightgreen',\r\n      fill: false,\r\n      lineTension: 0,\r\n      radius: 5,\r\n    },\r\n    {\r\n      label: 'Algo3',\r\n      data: [22, 32, 42, 62],\r\n      backgroundColor: 'red',\r\n      borderColor: 'pink',\r\n      fill: false,\r\n      lineTension: 0,\r\n      radius: 5,\r\n    },\r\n    {\r\n      label: 'Algo4',\r\n      data: [29, 39, 49, 69],\r\n      backgroundColor: 'orange',\r\n      borderColor: 'yellow',\r\n      fill: false,\r\n      lineTension: 0,\r\n      radius: 5,\r\n    },\r\n  ],\r\n};\r\n\r\nfunction SortingChart(){\r\n\r\n const [chartData, setChartData] = useState(initData);\r\n\r\n // Updates chart data on change\r\n  const handleChange = () => {\r\n    \r\n    // Grab selected algorithms and stores them as strings\r\n    var algoName1 = document.getElementById('selectA').value ;\r\n    var algoName2 = document.getElementById('selectB').value ; \r\n    var algoName3 = document.getElementById('selectC').value ; \r\n    var algoName4 = document.getElementById('selectD').value ;\r\n\r\n    midData = {\r\n      labels: ['100x100', '500x500', '1000x1000', '2000x2000'],\r\n      datasets: [\r\n        {\r\n          label: algoName1,\r\n          data: algo1Data,\r\n          backgroundColor: 'blue',\r\n          borderColor: 'lightblue',\r\n          fill: false,\r\n          lineTension: 0,\r\n          radius: 5,\r\n        },\r\n        {\r\n          label: algoName2,\r\n          data: algo2Data,\r\n          backgroundColor: 'green',\r\n          borderColor: 'lightgreen',\r\n          fill: false,\r\n          lineTension: 0,\r\n          radius: 5,\r\n        },\r\n        {\r\n          label: algoName3,\r\n          data: algo3Data,\r\n          backgroundColor: 'red',\r\n          borderColor: 'pink',\r\n          fill: false,\r\n          lineTension: 0,\r\n          radius: 5,\r\n        },\r\n        {\r\n          label: algoName4,\r\n          data: algo4Data,\r\n          backgroundColor: 'orange',\r\n          borderColor: 'yellow',\r\n          fill: false,\r\n          lineTension: 0,\r\n          radius: 5,\r\n        },\r\n      ],\r\n    };\r\n\r\n    setChartData(midData);\r\n   \r\n  }\r\n\r\nlet arrayACollection = [];\r\nlet arrayBCollection = [];\r\nlet arrayCCollection = [];\r\nlet arrayDCollection = [] ; \r\n\r\nlet arraysA   = [];\r\nlet arraysB  = [];\r\nlet arraysC  = [];\r\nlet arraysD = [];\r\n\r\n// Generate a random number from a given min and max range\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n\r\nfunction generateRandomArrays() {\r\n\r\n  arrayACollection = [];\r\n  arrayBCollection = [];\r\n  arrayCCollection = [];\r\n  arrayDCollection = [] ; \r\n  \r\n  arraysA   = [];\r\n  arraysB  = [];\r\n  arraysC  = [];\r\n  arraysD = [];\r\n  \r\n  // Generate random 100x100 arrays\r\n  for(let i = 0; i < 100; i++){\r\n      for (let j = 0; j < 100; j++) {\r\n          arraysA.push(randomIntFromInterval(5,10000));\r\n        }\r\n        arrayACollection.push(arraysA);\r\n        arraysA = [];\r\n  }\r\n\r\n  // Generate random 500x500 arrays\r\n  for(let i = 0; i < 500; i++){\r\n      for (let j = 0; j < 500; j++) {\r\n          arraysB.push(randomIntFromInterval(5,10000));\r\n        }\r\n        arrayBCollection.push(arraysB);\r\n        arraysB = [];\r\n  }\r\n\r\n  // Generate random 1000x1000 arrays\r\n  for(let i = 0; i < 1000; i++){\r\n      for (let j = 0; j < 1000; j++) {\r\n          arraysC.push(randomIntFromInterval(5,10000));\r\n        }\r\n        arrayCCollection.push(arraysC);\r\n        arraysC = [];\r\n  }\r\n\r\n  // Generate random 2000x2000 arrays\r\n  for(let i = 0; i < 2000; i++){\r\n      for (let j = 0; j < 2000; j++) {\r\n          arraysD.push(randomIntFromInterval(5,10000));\r\n        }\r\n        arrayDCollection.push(arraysD);\r\n        arraysD = [];\r\n  }\r\n\r\n console.log(arrayBCollection);\r\n    \r\n}\r\n\r\nfunction getSortData(){\r\n\r\n  generateRandomArrays();\r\n\r\n  var algoName1 = document.getElementById('selectA').value ;\r\n  var algoName2 = document.getElementById('selectB').value ; \r\n  var algoName3 = document.getElementById('selectC').value ; \r\n  var algoName4 = document.getElementById('selectD').value ;\r\n  \r\n  var algoTime1_A = 0 ;\r\n  var algoTime1_B = 0 ;\r\n  var algoTime1_C = 0 ;\r\n  var algoTime1_D = 0 ;\r\n  \r\n  var algoTime2_A = 0 ;\r\n  var algoTime2_B = 0 ;\r\n  var algoTime2_C = 0 ;\r\n  var algoTime2_D = 0 ;\r\n\r\n  var algoTime3_A = 0 ;\r\n  var algoTime3_B = 0 ;\r\n  var algoTime3_C = 0 ;\r\n  var algoTime3_D = 0 ;\r\n\r\n  var algoTime4_A = 0 ;\r\n  var algoTime4_B = 0 ;\r\n  var algoTime4_C = 0 ;\r\n  var algoTime4_D = 0 ;\r\n  \r\n  console.log(algoName1 + algoName2 + algoName3 + algoName4);   \r\n\r\n  // Promise logic used to make sure that algorithms run sequentially and don't interfere with time results\r\n  let chartPromise = new Promise(function(resolve, reject) {\r\n    algoTime1_A   = sortLoop(100,   algoName1, arrayACollection);\r\n    algoTime1_B  = sortLoop(500,  algoName1, arrayBCollection);\r\n    algoTime1_C  = sortLoop(1000,  algoName1, arrayCCollection);\r\n    algoTime1_D = sortLoop(2000, algoName1, arrayDCollection);\r\n\r\n    // Generate new un-sorted data\r\n    generateRandomArrays() ;\r\n    console.log(\"|here4|\");\r\n\r\n    resolve(1);\r\n\r\n  }).then(function(result) {\r\n\r\n    algoTime2_A   = sortLoop(100,   algoName2, arrayACollection);\r\n    algoTime2_B  = sortLoop(500,  algoName2, arrayBCollection);\r\n    algoTime2_C  = sortLoop(1000,  algoName2, arrayCCollection);\r\n    algoTime2_D = sortLoop(2000, algoName2, arrayDCollection);\r\n\r\n\r\n    generateRandomArrays() ;\r\n\r\n    console.log(\"|here5|\");\r\n\r\n    return result ; \r\n  \r\n  }).then(function(result) {\r\n    algoTime3_A   = sortLoop(100,   algoName3, arrayACollection);\r\n    algoTime3_B  = sortLoop(500,  algoName3, arrayBCollection);\r\n    algoTime3_C  = sortLoop(1000,  algoName3, arrayCCollection);\r\n    algoTime3_D = sortLoop(2000, algoName3, arrayDCollection);\r\n\r\n    generateRandomArrays() ;\r\n    console.log(\"|here6|\"); \r\n\r\n    return result ; \r\n  }).then(function(result){\r\n    algoTime4_A   = sortLoop(100,   algoName4, arrayACollection);\r\n    algoTime4_B  = sortLoop(500,  algoName4, arrayBCollection);\r\n    algoTime4_C  = sortLoop(1000,  algoName4, arrayCCollection);\r\n    algoTime4_D = sortLoop(2000, algoName4, arrayDCollection);\r\n\r\n\r\n    console.log(\"|here7|\");\r\n\r\n    return result ; \r\n  }).then(function(result){\r\n\r\n    algo1Data = [algoTime1_A, algoTime1_B, algoTime1_C, algoTime1_D];\r\n    algo2Data = [algoTime2_A, algoTime2_B, algoTime2_C, algoTime2_D];\r\n    algo3Data = [algoTime3_A, algoTime3_B, algoTime3_C, algoTime3_D];\r\n    algo4Data = [algoTime4_A, algoTime4_B, algoTime4_C, algoTime4_D];\r\n\r\n    handleChange();\r\n\r\n  })\r\n  \r\n}\r\n\r\n// Aggregates completion time for sorting large collection of arrays\r\nfunction sortLoop(sortSize, algoName, arrayCollection){\r\n\r\n  var totalTime = 0 ;\r\n\r\n  if(algoName == ''){\r\n    console.log(\"|NO SELECTION|\");\r\n    return;\r\n  }\r\n\r\n  for(let i = 0 ; i < sortSize ; i++){\r\n      switch(algoName){\r\n          case \"Quick Sort\":\r\n            totalTime = totalTime + controls.getQuicksortData(arrayCollection[i]);\r\n            break;\r\n          case \"Selection Sort\":\r\n            totalTime = totalTime + controls.getSelectionSortData(arrayCollection[i]);\r\n            break;\r\n          case \"Heap Sort\":\r\n            totalTime = totalTime + controls.getHeapSortData(arrayCollection[i]);\r\n            break;\r\n          case \"Comb Sort\":\r\n            totalTime = totalTime + controls.getCombSortData(arrayCollection[i]);\r\n            break;\r\n          case \"Bubble Sort\":\r\n            totalTime = totalTime + controls.getBubbleSortData(arrayCollection[i]);\r\n            break;\r\n          case \"Insertion Sort\":\r\n            totalTime = totalTime + controls.getInsertionSortData(arrayCollection[i]);\r\n            break;\r\n          case \"Gnome Sort\":\r\n            totalTime = totalTime + controls.getGnomeSortData(arrayCollection[i]);\r\n            break;\r\n          case \"Shell Sort\":\r\n            totalTime = totalTime + controls.getShellSortData(arrayCollection[i]);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n  }\r\n\r\n  return totalTime ;\r\n}\r\n  return (\r\n    <div>\r\n            <div id=\"statGraph\">\r\n            <Line data={chartData} options={chartOptions} redraw={true} ></Line>\r\n            \r\n          <label id=\"b1\" className='smallText'> Algorithm 1: </label>\r\n          <select id=\"selectA\">\r\n            <br></br>\r\n            <br></br>\r\n          <option></option>\r\n          <option>Quick Sort</option>\r\n          <option>Selection Sort</option>\r\n          <option>Heap Sort</option>\r\n          <option>Comb Sort</option>\r\n          <option>Bubble Sort</option>\r\n          <option>Insertion Sort</option>\r\n          <option>Gnome Sort</option>\r\n          <option>Shell Sort</option>\r\n          </select>\r\n          <label id=\"b2\" className='smallText'> Algorithm 2: </label>\r\n          <select id=\"selectB\">\r\n          <option></option>\r\n          <option>Quick Sort</option>\r\n          <option>Selection Sort</option>\r\n          <option>Heap Sort</option>\r\n          <option>Comb Sort</option>\r\n          <option>Bubble Sort</option>\r\n          <option>Insertion Sort</option>\r\n          <option>Gnome Sort</option>\r\n          <option>Shell Sort</option>\r\n          </select>\r\n          <label id=\"b3\" className='smallText'> Algorithm 3: </label>\r\n          <select id=\"selectC\">\r\n          <option></option>\r\n          <option>Quick Sort</option>\r\n          <option>Selection Sort</option>\r\n          <option>Heap Sort</option>\r\n          <option>Comb Sort</option>\r\n          <option>Bubble Sort</option>\r\n          <option>Insertion Sort</option>\r\n          <option>Gnome Sort</option>\r\n          <option>Shell Sort</option>\r\n          </select>\r\n          <label id=\"b4\" className='smallText'> Algorithm 4: </label>\r\n          <select id=\"selectD\">\r\n          <option></option>\r\n          <option>Quick Sort</option>\r\n          <option>Selection Sort</option>\r\n          <option>Heap Sort</option>\r\n          <option>Comb Sort</option>\r\n          <option>Bubble Sort</option>\r\n          <option>Insertion Sort</option>\r\n          <option>Gnome Sort</option>\r\n          <option>Shell Sort</option>\r\n          </select>\r\n          <br></br>\r\n          <button onClick={() => getSortData()}> Chart Sort</button>\r\n            \r\n            </div>\r\n            <div id=\"stats\"></div>\r\n\r\n          </div>\r\n  );\r\n\r\n}\r\n\r\n\r\nexport default SortingChart;","import logo from './logo.svg';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport SortingChart from './SortingChart/SortingChart'\nimport './App.css';\nimport React from 'react' ; \n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <section>\n    <SortingVisualizer></SortingVisualizer>\n    <SortingChart></SortingChart>\n\n    </section>\n    \n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}